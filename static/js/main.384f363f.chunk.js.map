{"version":3,"sources":["components/Task/Task.module.scss","redux/tasksReducer.js","components/CreateModeWindow/CreateModeWindow.jsx","components/Task/Task.jsx","components/TasksList/TasksList.jsx","App.jsx","serviceWorker.js","redux/redux-store.js","index.js","components/TasksList/TasksList.module.scss","components/CreateModeWindow/CreateModeWindow.module.scss"],"names":["module","exports","initialState","tasks","TodoReducer","state","action","type","fromLocalToRedux","LocalTasks","Object","keys","localStorage","key","push","id","JSON","parse","getItem","sort","a","b","getTasks","CreateModeWindow","handleSubmit","handleReset","className","s","onSubmit","onReset","name","cols","rows","btnGroup","submitBtn","closeBtn","Task","done","text","deleteTask","changeTask","cn","Task_done","Task__text","suppressContentEditableWarning","contentEditable","onBlur","e","target","innerHTML","dangerouslySetInnerHTML","__html","Task__btnGroup","checkBtn","btn","onChange","checked","deleteBtn","onClick","TasksList","React","memo","createTask","useState","createMode","setCreateMode","useEffect","TasksList__btnGroup","addTask","document","body","classList","add","clearLocalStorage","clear","TasksList__container","map","task","preventDefault","elements","value","reset","remove","connect","dispatch","setItem","toString","stringify","removeItem","App","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.384f363f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Task\":\"Task_Task__FR7rg\",\"Task__text\":\"Task_Task__text__SWHGT\",\"Task__btnGroup\":\"Task_Task__btnGroup__1hCJ9\",\"btn\":\"Task_btn__2oHy3\",\"checkBtn\":\"Task_checkBtn__3Sh_m\",\"deleteBtn\":\"Task_deleteBtn__3-0U4\",\"Task_done\":\"Task_Task_done__15rr9\"};","const GET_TASKS = 'Todo/GET_TASKS';\r\n\r\nconst initialState = {\r\n\ttasks: []\r\n};\r\n\r\nconst TodoReducer = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase GET_TASKS:\r\n\t\t\tconst fromLocalToRedux = () => {\r\n\t\t\t\tlet LocalTasks = []\r\n\t\t\t\tfor (let key of Object.keys(localStorage)) {\r\n\t\t\t\t\tif (key !== 'lastIndex') LocalTasks.push({ id: key, ...JSON.parse(localStorage.getItem(key))});\r\n\t\t\t\t}\r\n\t\t\t\treturn LocalTasks.sort((a, b) => a.id - b.id);\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttasks: fromLocalToRedux(),\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default TodoReducer;\r\nexport const getTasks = () => ({ type: GET_TASKS });\r\n\r\nexport const createTask = (text) => {\r\n\treturn (dispatch) => {\r\n\t\tif (!localStorage['lastIndex']) localStorage.setItem('lastIndex', 0);\r\n\t\t++localStorage['lastIndex'];\r\n\t\tlocalStorage.setItem(localStorage.getItem('lastIndex').toString(), JSON.stringify({ text, done: false }))\r\n\t\tdispatch(getTasks());\r\n\t}\r\n};\r\n\r\nexport const deleteTask = (id) => {\r\n\treturn (dispatch) => {\r\n\t\tlocalStorage.removeItem(id)\r\n\t\tdispatch(getTasks());\r\n\t}\r\n};\r\n\r\nexport const changeTask = (id, text, done) => {\r\n\treturn (dispatch) => {\r\n\t\tlocalStorage[id] = JSON.stringify({ text, done })\r\n\t\tdispatch(getTasks());\r\n\t}\r\n};","import React from 'react';\r\nimport s from './CreateModeWindow.module.scss'\r\n\r\nconst CreateModeWindow = ({ handleSubmit, handleReset }) => {\r\n    return (\r\n        <div className={s.CreateModeWindow}>\r\n            <form onSubmit={handleSubmit} onReset={handleReset}>\r\n                <textarea name=\"text\" cols=\"30\" rows=\"20\" />\r\n                <div className={s.btnGroup}>\r\n                    <button className={s.submitBtn} type=\"submit\" />\r\n                    <button className={s.closeBtn} type=\"reset\" />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CreateModeWindow;","import React from 'react';\r\nimport s from './Task.module.scss';\r\nimport cn from 'classnames';\r\n\r\n\r\nconst Task = ({ done, id, text, deleteTask, changeTask }) => {\r\n    return (\r\n        <div className={cn(s.Task, {[s.Task_done]: done})}>\r\n\r\n            <div className={s.Task__text} suppressContentEditableWarning contentEditable={!done}\r\n                onBlur={e => changeTask(id, e.target.innerHTML, done)}\r\n                dangerouslySetInnerHTML={{ __html: text }}\r\n            />\r\n\r\n            <div className={s.Task__btnGroup}>\r\n\r\n                <label className={cn(s.checkBtn, s.btn)}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        onChange={e => changeTask(id, text, e.target.checked)}\r\n                    />\r\n                </label>\r\n\r\n                <div className={cn(s.deleteBtn, s.btn)} onClick={() => deleteTask(id)} />\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Task","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getTasks, createTask, deleteTask, changeTask } from '../../redux/tasksReducer';\r\nimport CreateModeWindow from '../CreateModeWindow/CreateModeWindow';\r\nimport Task from '../Task/Task';\r\nimport s from './TasksList.module.scss'\r\n\r\nconst TasksList = React.memo(({ tasks, getTasks, createTask, deleteTask, changeTask }) => {\r\n    let [createMode, setCreateMode] = useState(false)\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        createTask(e.target.elements.text.value);\r\n        e.target.reset();\r\n    }\r\n\r\n    const handleReset = (e) => {\r\n        document.body.classList.remove('lock')\r\n        setCreateMode(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getTasks();\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className={s.TasksList}>\r\n\r\n                <div className={s.TasksList__btnGroup}>\r\n\r\n                    <div className={s.addTask}\r\n                        onClick={() => {\r\n                            document.body.classList.add('lock')\r\n                            setCreateMode(true)\r\n                        }}\r\n                    />\r\n\r\n                    <div className={s.clearLocalStorage}\r\n                        onClick={() => {\r\n                            localStorage.clear();\r\n                            getTasks();\r\n                        }}\r\n                    />\r\n                </div>\r\n\r\n                <div className={s.TasksList__container}>\r\n                    {tasks && tasks.map(task => <Task key={task.id} id={task.id} text={task.text} done={task.done} deleteTask={deleteTask} changeTask={changeTask} />)}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {createMode &&\r\n                <CreateModeWindow handleSubmit={handleSubmit} handleReset={handleReset} />\r\n            }\r\n        </>\r\n    )\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n    tasks: state.tasks,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getTasks, createTask, deleteTask, changeTask })(TasksList)","import React from 'react';\r\nimport TasksList from './components/TasksList/TasksList'\r\n\r\nconst App = () => {\r\n    return <TasksList />\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport tasks from './tasksReducer';\r\nimport thunkMiddleWare from 'redux-thunk';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    tasks,\r\n    composeEnhancers(applyMiddleware(thunkMiddleWare))\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/redux-store';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TasksList\":\"TasksList_TasksList__2jWvK\",\"TasksList__container\":\"TasksList_TasksList__container__3ESUR\",\"TasksList__btnGroup\":\"TasksList_TasksList__btnGroup__2ci7o\",\"addTask\":\"TasksList_addTask__9mCGK\",\"clearLocalStorage\":\"TasksList_clearLocalStorage__24JtS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CreateModeWindow\":\"CreateModeWindow_CreateModeWindow__EtPyY\",\"btnGroup\":\"CreateModeWindow_btnGroup__3iJCp\",\"closeBtn\":\"CreateModeWindow_closeBtn__20V2y\",\"submitBtn\":\"CreateModeWindow_submitBtn__3ToAG\"};"],"sourceRoot":""}